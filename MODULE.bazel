module(
    name = "dev_monorepo",
    repo_name = "me_aeed_dev_monorepo",
)

#
# C++ setup
#

bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "googletest", version = "1.17.0", repo_name = "gtest")
bazel_dep(name = "rules_pkg", version = "1.1.0")
bazel_dep(name = "boost.algorithm", version = "1.87.0")
# TODO: include it when it is fixed on Windows
#bazel_dep(name = "assimp", version = "5.4.3.bcr.5")

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    commit = "0e990032f3c5a866e72615cf67e5ce22186dcb97",
    # Replace the commit hash (above) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main).
    # Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
)

register_toolchains()

# load vulkan
vulkan_module = use_extension("//third_party/vulkan:extensions.bzl", "vulkan_module")
use_repo(vulkan_module, "vulkan_windows")
use_repo(vulkan_module, "vulkan_linux")
use_repo(vulkan_module, "vulkan_macos")
use_repo(vulkan_module, "vulkan_android")

# register glsl toolchains
register_toolchains("//third_party/glsl:glsl_all_platforms_toolchain")

# load glm
bazel_dep(name = "glm", version = "1.0.1")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# load glfw
GLFW_VERSION = "3.3.5"

http_archive(
    name = "glfw",
    build_file = "//third_party/glfw:glfw.bzl",
    sha256 = "a89bb6074bc12bc12fcd322dcf848af81b679ccdc695f70b29ca8a9aa066684b",
    strip_prefix = "glfw-{}".format(GLFW_VERSION),
    urls = ["https://github.com/glfw/glfw/archive/{}.zip".format(GLFW_VERSION)],
)

#
#   Python setup
#
bazel_dep(name = "rules_python", version = "1.5.1")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.12",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = "3.12",
    requirements_lock = "//:requirements_lock_3_12.txt",
)

use_repo(pip, "pypi")